// Code generated by fastssz. DO NOT EDIT.
// Hash: 57a8d430117520491e9ae29da04571755b703f6ccc69a489b4e2ce1004201883
// Version: 0.1.3
package deneb

import (
	"github.com/attestantio/go-eth2-client/spec/deneb"
	ssz "github.com/ferranbt/fastssz"
	"github.com/holiman/uint256"
)

// MarshalSSZ ssz marshals the BuilderBid object
func (b *BuilderBid) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BuilderBid object to a target array
func (b *BuilderBid) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(88)

	// Offset (0) 'Header'
	dst = ssz.WriteOffset(dst, offset)
	if b.Header == nil {
		b.Header = new(deneb.ExecutionPayloadHeader)
	}
	offset += b.Header.SizeSSZ()

	// Field (1) 'Value'
	value := b.Value.Bytes32()
	for i := 0; i < 32; i++ {
		dst = append(dst, value[31-i])
	}

	// Field (2) 'Pubkey'
	dst = append(dst, b.Pubkey[:]...)

	// Offset (3) 'BlindedBlobsBundle'
	dst = ssz.WriteOffset(dst, offset)
	if b.BlindedBlobsBundle == nil {
		b.BlindedBlobsBundle = new(BlindedBlobsBundle)
	}
	offset += b.BlindedBlobsBundle.SizeSSZ()

	// Field (0) 'Header'
	if dst, err = b.Header.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'BlindedBlobsBundle'
	if dst, err = b.BlindedBlobsBundle.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the BuilderBid object
func (b *BuilderBid) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 88 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o3 uint64

	// Offset (0) 'Header'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 88 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Value'
	value := make([]byte, 32)
	for i := 0; i < 32; i++ {
		value[i] = buf[35-i]
	}
	if b.Value == nil {
		b.Value = new(uint256.Int)
	}
	b.Value.SetBytes32(value)

	// Field (2) 'Pubkey'
	copy(b.Pubkey[:], buf[36:84])

	// Offset (3) 'BlindedBlobsBundle'
	if o3 = ssz.ReadOffset(buf[84:88]); o3 > size || o0 > o3 {
		return ssz.ErrOffset
	}

	// Field (0) 'Header'
	{
		buf = tail[o0:o3]
		if b.Header == nil {
			b.Header = new(deneb.ExecutionPayloadHeader)
		}
		if err = b.Header.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (3) 'BlindedBlobsBundle'
	{
		buf = tail[o3:]
		if b.BlindedBlobsBundle == nil {
			b.BlindedBlobsBundle = new(BlindedBlobsBundle)
		}
		if err = b.BlindedBlobsBundle.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BuilderBid object
func (b *BuilderBid) SizeSSZ() (size int) {
	size = 88

	// Field (0) 'Header'
	if b.Header == nil {
		b.Header = new(deneb.ExecutionPayloadHeader)
	}
	size += b.Header.SizeSSZ()

	// Field (3) 'BlindedBlobsBundle'
	if b.BlindedBlobsBundle == nil {
		b.BlindedBlobsBundle = new(BlindedBlobsBundle)
	}
	size += b.BlindedBlobsBundle.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the BuilderBid object
func (b *BuilderBid) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BuilderBid object with a hasher
func (b *BuilderBid) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Header'
	if err = b.Header.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Value'
	value := b.Value.Bytes32()
	for i, j := 0, 31; i < j; i, j = i+1, j-1 {
		value[i], value[j] = value[j], value[i]
	}
	hh.PutBytes(value[:])

	// Field (2) 'Pubkey'
	hh.PutBytes(b.Pubkey[:])

	// Field (3) 'BlindedBlobsBundle'
	if err = b.BlindedBlobsBundle.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BuilderBid object
func (b *BuilderBid) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
